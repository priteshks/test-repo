# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]
  workflow_call:
    inputs:
      is_tst_run:
        description: only for end-2-end test workflow
        type: boolean
        default: false
      base_repo:
        description: only for end-2-end test workflow
        type: string
        default: priteshks/test-repo
  

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      base_repo:
        description: only for end-2-end test workflow
        type: string
        default: priteshks/test-repo

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    outputs:
      orgs: ${{ steps.orgs.outputs.orgs }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Set repository ID 
        run: echo "REPOSITORY_ID=${{ github.repository }}" >> $GITHUB_ENV
      - name: Validate repository ID 
        if: ${{ env.REPOSITORY_ID != '' && env.REPOSITORY_ID > 0 }} 
        run: |
          echo "Valid repository ID: ${{ env.REPOSITORY_ID }}"
        
      - name: Run a one-line script
        run: |
          echo Hello, world!
          touch orgs.json
          jobs=${{ github.job }}

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        id: orgs
        run: |
          is_tst_run=${{ inputs.is_tst_run }}
          REPOSITORY_OWNER=${{ github.repository_owner }}
          eventtype=${{ github.event_name }}
          if [ "$is_tst_run" == true ]; then 
            orgs=[$(echo "\"${{ inputs.is_tst_run }}\"" | jq .)]
          elif [[ "$REPOSITORY_OWNER" == "priteshks" ]]; then
            orgs=[$(echo "\"${{ github.event_name }}\"" | jq .)]
          else
            orgs=[$(echo "\"$REPOSITORY_OWNER\"" | jq .)]
          fi
          echo ${{ github.event_name }}
          echo "orgs=$orgs" >> $GITHUB_OUTPUT


      - name: Check if orgs.json exists 
        run: |
          if [ -f ./orgs.json ]; then 
            echo "orgs.json file exists." 
          else 
            echo "orgs.json file does not exist." 
          fi

  process-orgs:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        org: ${{ fromJson(needs.build.outputs.orgs) }}

    steps:
      - name: Complete
        run: echo "Organization ${{ matrix.org}} processed successfully."

      - name: Get workflow reference
        if: ${{ inputs.base_repo }}
        id: workflows-ref
        run: |
          api_response=$(curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }})
          echo $api_response

          workflow_shas=$(echo "$api_response" | jq -r '[.referenced_workflows[] | select(.path | startswith("${{ inputs.base_repo }}")) | .sha] | unique')
          echo $workflow_shas
          has_multiple_shas=$(echo "$workflow_shas" | jq -r 'length > 1')
          echo $has_multiple_shas
          if [[ $has_multiple_shas == "true" ]]
          then
            echo "Error: ${{ inputs.base_repo }} has multiple SHAs in this workflow execution, which means there are different versions being called. This is not supported at this moment. SHAs: ${workflow_shas}"
            exit 1
          fi

          base_repo_ref=$(echo "$workflow_shas" | jq -r '.[0]')
          echo $base_repo_ref

          echo "base_repo_ref: $base_repo_ref"
          echo "base_repo_ref=$base_repo_ref" >> $GITHUB_OUTPUT
